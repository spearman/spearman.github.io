var searchIndex = {};
searchIndex["rs_utils"] = {"doc":"Miscellaneous Rust utilities.","items":[[0,"array","rs_utils","Array utilities",null,null],[5,"fst","rs_utils::array","Create a new array from the first elements of an array of pairs of the same length as the first array.",null,{"inputs":[{"name":"genericarray"}],"output":{"name":"genericarray"}}],[5,"fst_default","","Create a new array from the first elements of an array of pairs or the default if the destination array length is longer than the input array length.",null,{"inputs":[{"name":"genericarray"}],"output":{"name":"genericarray"}}],[5,"fst_initial","","Create a new array from the first elements of an array of pairs of equal or greater length than the first.",null,{"inputs":[{"name":"genericarray"}],"output":{"name":"genericarray"}}],[5,"snd","","Create a new array from the second elements of an array of pairs of the same length as the second array.",null,{"inputs":[{"name":"genericarray"}],"output":{"name":"genericarray"}}],[5,"snd_default","","Create a new array from the second elements of an array of pairs or the default if the destination array length is longer than the input array length.",null,{"inputs":[{"name":"genericarray"}],"output":{"name":"genericarray"}}],[5,"snd_initial","","Create a new array from the second elements of an array of pairs of equal or greater length than the second.",null,{"inputs":[{"name":"genericarray"}],"output":{"name":"genericarray"}}],[0,"file","rs_utils","File utilities.",null,null],[5,"file_new_append_incremental","rs_utils::file","Calls `file_new_append` on the path returned by feeding the file path to `file_path_incremental`. # Errors",null,{"inputs":[{"name":"path"}],"output":{"generics":["error"],"name":"result"}}],[5,"file_new_append","","Opens a new file at specified path for writing in append mode, recursively creating parent directories # Errors",null,{"inputs":[{"name":"path"}],"output":{"generics":["file","error"],"name":"result"}}],[5,"file_path_incremental","","Returns the file path appended with suffix `-N` where `N` gives the first available non-pre-existing filename starting from `0`.",null,{"inputs":[{"name":"path"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[5,"file_path_incremental_with_extension","","Like file path incremental but preserves the file extension if one is present.",null,{"inputs":[{"name":"path"}],"output":{"generics":["pathbuf","error"],"name":"result"}}],[5,"is_file","","If this returns true then `std::fs::File::create` will not fail with \"is a directory\" error.",null,{"inputs":[{"name":"path"}],"output":{"generics":["bool","error"],"name":"result"}}],[0,"numeric","rs_utils","Numeric utilities.",null,null],[5,"min_partial","rs_utils::numeric","Returns the minimum of two partially ordered values, returning the rhs when they are incomparable.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"s"}}],[5,"max_partial","","Returns the maximum of two partially ordered values, returning the rhs when they are incomparable.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"s"}}],[0,"process","rs_utils","Process related utilities.",null,null],[3,"EXE_FILE_NAME","rs_utils::process","A lazy static string loaded from the first element of `std::env::args()` (the name of the executable file currently being run).",null,null],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"initialize","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"EXE_FILE_NAME"]]};
initSearch(searchIndex);
