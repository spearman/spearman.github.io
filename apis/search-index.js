var searchIndex = {};
searchIndex["apis"] = {"doc":"","items":[[5,"report","apis","",null,{"inputs":[],"output":null}],[0,"channel","","",null,null],[3,"Channel","apis::channel","Main channel struct.",null,null],[12,"def","","",0,null],[12,"sourcepoints","","",0,null],[12,"endpoints","","",0,null],[3,"Def","","Channel definition.",null,null],[3,"RecvError","","Sender disconnected, no further messages will ever be received.",null,null],[3,"SendError","","Receiver disconnected, message will never be deliverable.",null,null],[12,"0","","",1,null],[4,"Kind","","Channel kind defines the connection topology of a channel.",null,null],[13,"Simplex","","An SPSC stream.",2,null],[13,"Sink","","A sink accepting a single message type from producers.",2,null],[13,"Source","","A source capable of sending messages of a single type directly to individual consumers.",2,null],[4,"DefineError","","Error defining `Def`.",null,null],[13,"ProducerEqConsumer","","",3,null],[13,"DuplicateProducer","","",3,null],[13,"DuplicateConsumer","","",3,null],[13,"MultipleProducers","","",3,null],[13,"MultipleConsumers","","",3,null],[13,"ZeroProducers","","",3,null],[13,"ZeroConsumers","","",3,null],[4,"CreateError","","Error creating concrete `Channel` instance from a given channel def.",null,null],[13,"KindMismatch","","",4,null],[4,"TryRecvError","","",null,null],[13,"Empty","","",5,null],[13,"Disconnected","","Sender disconnected, no further messages will be received.",5,null],[5,"report","","",null,{"inputs":[],"output":null}],[0,"backend","","",null,null],[3,"Simplex","apis::channel::backend","An SPSC stream.",null,null],[3,"Sink","","An MPSC sink.",null,null],[3,"Source","","An SPMC source.",null,null],[0,"broadcast","","",null,null],[0,"buffer","","",null,null],[0,"session_typed","","",null,null],[8,"Backend","","",null,null],[11,"try_from","","",6,{"inputs":[{"name":"def"}],"output":{"name":"result"}}],[11,"from","apis::channel","",0,{"inputs":[{"name":"simplex"}],"output":{"name":"self"}}],[11,"try_from","apis::channel::backend","",7,{"inputs":[{"name":"def"}],"output":{"name":"result"}}],[11,"from","apis::channel","",0,{"inputs":[{"name":"sink"}],"output":{"name":"self"}}],[11,"try_from","apis::channel::backend","",8,{"inputs":[{"name":"def"}],"output":{"name":"result"}}],[11,"from","apis::channel","",0,{"inputs":[{"name":"source"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"senderror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"senderror"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"recverror"}],"output":{"name":"self"}}],[11,"from","","",9,{"inputs":[{"name":"recverror"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"self"}}],[8,"Id","","Unique identifier with a total mapping to channel infos.",null,null],[10,"def","","",10,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[10,"message_type_id","","",10,null],[10,"create","","Create a new channel.",10,{"inputs":[{"name":"def"}],"output":{"name":"channel"}}],[8,"Sourcepoint","","Interface for a channel sourcepoint.",null,null],[10,"send","","",11,null],[10,"send_to","","",11,null],[8,"Endpoint","","Interface for a channel endpoint.",null,null],[10,"recv","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["recverror"],"name":"result"}}],[10,"try_recv","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["tryrecverror"],"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"recverror"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"senderror"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"defineerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"defineerror"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"createerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"createerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tryrecverror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"define","","The only method for creating valid channel def struct; validates specification of sourcepoints and endpoints for well-formedness (at least one process at each end, no duplicates or self-loops) and compatibility with channel kind (restricted to single process sourcepoint or endpoint where appropriate).",13,null],[11,"id","","",13,null],[11,"kind","","",13,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"producers","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"consumers","","",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_channel","","",13,{"inputs":[{"name":"self"}],"output":{"name":"channel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[0,"message","apis","",null,null],[5,"report","apis::message","",null,{"inputs":[],"output":null}],[8,"Id","","Unique ID for each global message type used in a given session context.",null,null],[8,"Global","","The global message type.",null,null],[10,"id","","",14,null],[8,"Message","","A local message type with partial mapping from global message type and total mapping into global message type.",null,null],[0,"process","apis","",null,null],[3,"Def","apis::process","Process definition.",null,null],[3,"Handle","","Handle to a process held by the session.",null,null],[12,"result_rx","","",15,null],[12,"continuation_tx","","",15,null],[12,"join_or_continue","","When the session drops, the `finish` method will either join or send a continuation depending on the contents of this field.",15,null],[4,"Kind","","Specifies the loop behavior of a process.",null,null],[13,"Asynchronous","","Block waiting on one or more endpoints.",16,null],[12,"messages_per_update","apis::process::Kind","",16,null],[13,"Isochronous","apis::process","A fixed-time step polling loop that will try to \"catch up\" if it falls behind.",16,null],[12,"tick_ms","apis::process::Kind","",16,null],[12,"ticks_per_update","","",16,null],[13,"Mesochronous","apis::process","A rate-limited polling loop.",16,null],[12,"tick_ms","apis::process::Kind","",16,null],[12,"ticks_per_update","","",16,null],[13,"Anisochronous","apis::process","Poll to exhaustion and update immediately.",16,null],[4,"ControlFlow","","",null,null],[13,"Continue","","",17,null],[13,"Break","","",17,null],[4,"KindError","","",null,null],[13,"AsynchronousZeroMessagesPerUpdate","","",18,null],[13,"IsochronousZeroTickMs","","",18,null],[13,"IsochronousZeroTicksPerUpdate","","",18,null],[13,"MesochronousZeroTickMs","","",18,null],[13,"MesochronousZeroTicksPerUpdate","","",18,null],[4,"DefineError","","Error in `Def`.",null,null],[13,"DuplicateSourcepoint","","",19,null],[13,"DuplicateEndpoint","","",19,null],[13,"SourcepointEqEndpoint","","",19,null],[13,"AsynchronousZeroEndpoints","","",19,null],[13,"AsynchronousMultipleEndpoints","","",19,null],[5,"report","","",null,{"inputs":[],"output":null}],[0,"inner","","",null,null],[3,"Inner","apis::process::inner","",null,null],[3,"State","","",null,null],[3,"ExtendedState","","",null,null],[12,"def","","",20,null],[12,"session_handle","","",20,null],[12,"sourcepoints","","",20,null],[12,"endpoints","","",20,null],[3,"Event","","",null,null],[4,"StateId","","",null,null],[13,"Ready","","",21,null],[13,"Running","","",21,null],[13,"Ended","","",21,null],[4,"StateData","","",null,null],[13,"Ready","","",22,null],[13,"Running","","",22,null],[13,"Ended","","",22,null],[4,"Transition","","",null,null],[13,"Internal","","",23,null],[13,"External","","",23,null],[4,"EventId","","",null,null],[13,"Run","","",24,null],[13,"End","","",24,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"stateid"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"stateid"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"transition"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"transition"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"report","","",26,{"inputs":[],"output":null}],[11,"new","","",26,{"inputs":[{"name":"extendedstate"}],"output":{"name":"self"}}],[11,"state","","",26,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"extended_state","","",26,{"inputs":[{"name":"self"}],"output":{"name":"extendedstate"}}],[11,"extended_state_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"extendedstate"}}],[11,"handle_event","","",26,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"generics":["handleeventexception"],"name":"result"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"extendedstate"}}],[11,"as_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"extendedstate"}}],[11,"drop","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"initial","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"id","","",27,{"inputs":[{"name":"self"}],"output":{"name":"stateid"}}],[11,"data","","",27,{"inputs":[{"name":"self"}],"output":{"name":"statedata"}}],[11,"from","","",27,{"inputs":[{"name":"stateid"}],"output":{"name":"self"}}],[11,"initial","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"terminal","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",22,{"inputs":[{"name":"stateid"}],"output":{"name":"self"}}],[11,"initial","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"terminal","","",21,{"inputs":[],"output":{"name":"self"}}],[11,"transition","","",24,{"inputs":[{"name":"self"}],"output":{"name":"transition"}}],[11,"transition","","",25,{"inputs":[{"name":"self"}],"output":{"name":"transition"}}],[11,"from","","",25,{"inputs":[{"name":"eventid"}],"output":{"name":"self"}}],[11,"dotfile","","",26,{"inputs":[],"output":{"name":"string"}}],[11,"dotfile_hide_defaults","","",26,{"inputs":[],"output":{"name":"string"}}],[11,"dotfile_pretty_defaults","","",26,{"inputs":[],"output":{"name":"string"}}],[11,"new","","Creation method that allows overriding defaults. If a field does not have a default specified it is a required argument.",20,{"inputs":[{"generics":["def"],"name":"option"},{"generics":["handle"],"name":"option"},{"generics":["vecmap"],"name":"option"},{"generics":["refcell"],"name":"option"}],"output":{"name":"option"}}],[0,"presult","apis::process","",null,null],[8,"Global","apis::process::presult","",null,null],[8,"Presult","","A constraint on process result types.",null,null],[8,"Process","apis::process","Main process trait.",null,null],[10,"new","","",28,{"inputs":[{"name":"inner"}],"output":{"name":"self"}}],[10,"inner_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"inner"}}],[10,"inner_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"inner"}}],[10,"result_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"res"}}],[10,"result_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"res"}}],[10,"global_result","","",28,null],[10,"extract_result","","",28,{"inputs":[{"name":"vecmap"}],"output":{"generics":["string"],"name":"result"}}],[10,"handle_message","","",28,null],[10,"update","","",28,{"inputs":[{"name":"self"}],"output":{"name":"controlflow"}}],[11,"initialize","","Does nothing by default, may be overridden.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"terminate","","Does nothing by default, may be overridden.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"id","","",28,null],[11,"kind","","",28,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"state_id","","",28,{"inputs":[{"name":"self"}],"output":{"name":"stateid"}}],[11,"def","","",28,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"sourcepoints","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"sourcepoints_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"endpoints","","This method returns a `Ref <Option <...>>` because during the run loop the endpoints will be unavailable as they are being iterated over. Endpoints are automatically waited on or polled in the appropriate `run_*` function. Endpoints will be present for the calls to `terminate` or `initialize`, either before or after the run loop, respectively.",28,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"ref"}}],[11,"endpoints_mut","","This method returns a `Ref <Option <...>>` because during the run loop the endpoints will be unavailable as they are being iterated over. Endpoints are automatically waited on or polled in the appropriate `run_*` function. Endpoints will be present for the calls to `terminate` or `initialize`, either before or after the run loop, respectively.",28,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"refmut"}}],[11,"take_endpoints","","This method is used within the process `run_*` methods to get the endpoints without borrowing the process. Endpoints will then be replaced with `None` and unavailable within the run loop.",28,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"vecmap"}}],[11,"put_endpoints","","Errors",28,{"inputs":[{"name":"self"},{"generics":["box"],"name":"vecmap"}],"output":null}],[11,"send","","",28,null],[11,"send_to","","",28,null],[11,"run","","Run a process to completion and send the result on the result channel.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"run_continue","","Run a process to completion, send the result to the session, and proceed with the continuation received from the session.",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"run_asynchronous","","Asynchronous run loop waits for messages on the single endpoint held by this process and calls the process update method for every $n >= 1$ messages as specified by the process kind.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"run_isochronous","","This function implements a fixed-timestep update loop.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"run_mesochronous","","This function implements a rate-limited update loop.",28,{"inputs":[{"name":"self"}],"output":null}],[11,"run_anisochronous","","An un-timed run loop that polls for messages.",28,{"inputs":[{"name":"self"}],"output":null}],[8,"Id","","Unique identifier with a total mapping to process defs.",null,null],[10,"def","","",29,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[10,"spawn","","Must initialize the concrete process type start running the initial closure.",29,{"inputs":[{"name":"inner"}],"output":{"generics":["option"],"name":"joinhandle"}}],[10,"gproc","","Initialie the concrete proces type and return in a CTX::GPROC.",29,null],[8,"Global","","The global process type.",null,null],[10,"id","","",30,null],[10,"run","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"controlflow"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"controlflow"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"kinderror"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"kinderror"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"defineerror"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"defineerror"}],"output":{"name":"bool"}}],[11,"define","","The only method to create a valid process def struct. Checks for duplicate sourcepoints or endpoints, self-loops, and restrictions on process kind (asynchronous processes are incompatible with certain combinations of backends).",31,null],[11,"id","","",31,null],[11,"kind","","",31,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"sourcepoints","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"endpoints","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"asynchronous_default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"isochronous_default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"mesochronous_default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"anisochronous_default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"new_asynchronous","","",16,{"inputs":[{"name":"u32"}],"output":{"generics":["vec"],"name":"result"}}],[11,"new_isochronous","","",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"result"}}],[11,"new_mesochronous","","",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"result"}}],[11,"new_anisochronous","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",17,{"inputs":[{"generics":["senderror"],"name":"result"}],"output":{"name":"self"}}],[0,"program","apis","",null,null],[3,"Def","apis::program","Program metainformation.",null,null],[8,"Program","","",null,null],[10,"run","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[0,"session","apis","",null,null],[3,"Session","apis::session","",null,null],[3,"State","","",null,null],[3,"ExtendedState","","",null,null],[12,"def","","",34,null],[12,"process_handles","","",34,null],[12,"main_process","","",34,null],[3,"Event","","",null,null],[3,"Def","","Session metainformation.",null,null],[3,"Handle","","Handle to the session held by processes.",null,null],[12,"result_tx","","",35,null],[12,"continuation_rx","","",35,null],[4,"StateId","","",null,null],[13,"Ready","","",36,null],[13,"Running","","",36,null],[13,"Ended","","",36,null],[4,"StateData","","",null,null],[13,"Ready","","",37,null],[13,"Running","","",37,null],[13,"Ended","","",37,null],[4,"Transition","","",null,null],[13,"Internal","","",38,null],[13,"External","","",38,null],[4,"EventId","","",null,null],[13,"Run","","",39,null],[13,"End","","",39,null],[4,"DefineError","","Error in `Def` definition.",null,null],[13,"ProducerSourcepointMismatch","","",40,null],[13,"ConsumerEndpointMismatch","","",40,null],[5,"report","","",null,{"inputs":[],"output":null}],[8,"Context","","Trait specifying types in session context with a method to attempt to create a valid session def struct from those types.",null,null],[16,"MID","","",41,null],[16,"CID","","",41,null],[16,"PID","","",41,null],[16,"GMSG","","The global message type.",41,null],[16,"GPROC","","The global process type.",41,null],[16,"GPRES","","The global process result type.",41,null],[10,"maybe_main","","",41,{"inputs":[],"output":{"name":"option"}}],[10,"name","","",41,{"inputs":[],"output":{"name":"string"}}],[11,"def","","Return a session def struct if the defined context is valid. # Errors",41,{"inputs":[],"output":{"generics":["def","vec"],"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stateid"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"stateid"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"transition"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"transition"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"eventid"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"eventid"}],"output":{"name":"bool"}}],[11,"report","","",43,{"inputs":[],"output":null}],[11,"new","","",43,{"inputs":[{"name":"extendedstate"}],"output":{"name":"self"}}],[11,"state","","",43,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"extended_state","","",43,{"inputs":[{"name":"self"}],"output":{"name":"extendedstate"}}],[11,"extended_state_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"extendedstate"}}],[11,"handle_event","","",43,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"generics":["handleeventexception"],"name":"result"}}],[11,"as_ref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"extendedstate"}}],[11,"as_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"extendedstate"}}],[11,"drop","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"initial","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"id","","",44,{"inputs":[{"name":"self"}],"output":{"name":"stateid"}}],[11,"data","","",44,{"inputs":[{"name":"self"}],"output":{"name":"statedata"}}],[11,"from","","",44,{"inputs":[{"name":"stateid"}],"output":{"name":"self"}}],[11,"initial","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"terminal","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",37,{"inputs":[{"name":"stateid"}],"output":{"name":"self"}}],[11,"initial","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"terminal","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"transition","","",39,{"inputs":[{"name":"self"}],"output":{"name":"transition"}}],[11,"transition","","",42,{"inputs":[{"name":"self"}],"output":{"name":"transition"}}],[11,"from","","",42,{"inputs":[{"name":"eventid"}],"output":{"name":"self"}}],[11,"dotfile","","",43,{"inputs":[],"output":{"name":"string"}}],[11,"dotfile_hide_defaults","","",43,{"inputs":[],"output":{"name":"string"}}],[11,"dotfile_pretty_defaults","","",43,{"inputs":[],"output":{"name":"string"}}],[11,"new","","Creation method that allows overriding defaults. If a field does not have a default specified it is a required argument.",34,{"inputs":[{"generics":["def"],"name":"option"},{"generics":["vecmap"],"name":"option"},{"generics":["option"],"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"def"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"defineerror"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"defineerror"}],"output":{"name":"bool"}}],[11,"def","","",43,{"inputs":[{"name":"self"}],"output":{"name":"def"}}],[11,"name","","",43,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"state_id","","",43,{"inputs":[{"name":"self"}],"output":{"name":"stateid"}}],[11,"run","","Creates a new session and runs to completion.",43,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"run_with","","Run a session with given channels and handles to processes that are running in a continuation from a previous session.",43,{"inputs":[{"name":"self"},{"generics":["channel"],"name":"vecmap"},{"generics":["handle"],"name":"vecmap"},{"generics":["box"],"name":"option"}],"output":{"name":"vecmap"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"create_channels","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["channel"],"name":"vecmap"}}],[11,"from","","",43,{"inputs":[{"name":"def"}],"output":{"name":"self"}}],[14,"def_program","apis","Define a program state machine.",null,null],[14,"def_session","","Macro to define all parts of a session.",null,null]],"paths":[[3,"Channel"],[3,"SendError"],[4,"Kind"],[4,"DefineError"],[4,"CreateError"],[4,"TryRecvError"],[3,"Simplex"],[3,"Sink"],[3,"Source"],[3,"RecvError"],[8,"Id"],[8,"Sourcepoint"],[8,"Endpoint"],[3,"Def"],[8,"Global"],[3,"Handle"],[4,"Kind"],[4,"ControlFlow"],[4,"KindError"],[4,"DefineError"],[3,"ExtendedState"],[4,"StateId"],[4,"StateData"],[4,"Transition"],[4,"EventId"],[3,"Event"],[3,"Inner"],[3,"State"],[8,"Process"],[8,"Id"],[8,"Global"],[3,"Def"],[8,"Program"],[3,"Def"],[3,"ExtendedState"],[3,"Handle"],[4,"StateId"],[4,"StateData"],[4,"Transition"],[4,"EventId"],[4,"DefineError"],[8,"Context"],[3,"Event"],[3,"Session"],[3,"State"],[3,"Def"]]};
initSearch(searchIndex);
