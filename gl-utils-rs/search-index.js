var searchIndex = {};
searchIndex["gl_utils"] = {"doc":"`gl`/`glutin`/`glium` + general graphics utility functions.","items":[[17,"DEBUG_RED","gl_utils::color","",null,null],[17,"DEBUG_GREEN","","",null,null],[17,"DEBUG_BLUE","","",null,null],[17,"DEBUG_PINK","","",null,null],[17,"DEBUG_VIOLET","","",null,null],[17,"DEBUG_YELLOW","","",null,null],[17,"DEBUG_GOLD","","",null,null],[17,"DEBUG_LIGHT_GREEN","","",null,null],[17,"DEBUG_LIGHT_BLUE","","",null,null],[17,"DEBUG_CHARTREUSE","","",null,null],[17,"DEBUG_AZURE","","",null,null],[17,"DEBUG_GREY","","",null,null],[5,"rgba_u8_to_rgba_f32","","",null,null],[0,"info","gl_utils","Functions for writing various `glium` and `glutin` context info to a file handle.",null,null],[5,"glutin_info_write","gl_utils::info","",null,{"inputs":[{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glutin_gl_window_info_write","","",null,{"inputs":[{"name":"glwindow"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glutin_gl_context_info_write","","",null,{"inputs":[{"name":"c"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glutin_window_info_write","","",null,{"inputs":[{"name":"window"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glutin_events_loop_info_write","","",null,{"inputs":[{"name":"eventsloop"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glium_info_write","","",null,{"inputs":[{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glium_display_info_write","","",null,{"inputs":[{"name":"display"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glium_context_info_write","","",null,{"inputs":[{"name":"context"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glium_capabilities_source_info_write","","",null,{"inputs":[{"name":"c"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[5,"glium_surface_info_write","","",null,{"inputs":[{"name":"s"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[0,"graphics","gl_utils","General graphics-related utility functions.",null,null],[3,"Pose3d","gl_utils::graphics","",null,null],[12,"position","","",0,null],[12,"yaw","","",0,null],[12,"pitch","","",0,null],[5,"orientation_from_yaw_pitch","","Computes an orientation basis based on given yaw and pitch.",null,{"inputs":[{"generics":["f32"],"name":"rad"},{"generics":["f32"],"name":"rad"}],"output":{"generics":["f32"],"name":"basis3"}}],[5,"point2d_clamp","","Clamp a 2D point to the given AABB rectangle, returns true if point was modified, or false otherwise if the point is already within the volume.",null,{"inputs":[{"name":"aabb2"},{"name":"point2"}],"output":{"name":"bool"}}],[5,"projection_mat_orthographic","","Convenience method that calls `cgmath::ortho` on the given `Ortho` struct",null,{"inputs":[{"name":"ortho"}],"output":{"name":"matrix4"}}],[5,"projection_mat_perspective","","Convenience method calling `cgmath::perspective` on the given `PerspectiveFov` struct.",null,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"matrix4"}}],[5,"rand_point3d","","Generate a random point contained in the give AABB",null,{"inputs":[{"name":"r"},{"name":"aabb3"}],"output":{"name":"point3"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pose3d"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"pose3d"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"pose3d"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[0,"camera2d","gl_utils","Types and functions for 2D rendering",null,null],[3,"Camera2d","gl_utils::camera2d","Represents a camera (\"view\") positioned and oriented in a 2D scene with a 2D transformation and a 2D projection",null,null],[12,"position","","Position in 2D world space",1,null],[12,"yaw","","Yaw represents a counter-clockwise rotation restricted to the range $[0, 2\\pi)$.",1,null],[12,"orientation","","Basis derived from `yaw`.",1,null],[12,"transform_mat_world_to_view","","Transforms points from 2D world space to 2D camera (view, eye) space as specified by the camera position and orientation.",1,null],[12,"viewport_width","","",1,null],[12,"viewport_height","","",1,null],[12,"zoom","","Determines the extent of the view represented in the `ortho` structure",1,null],[12,"ortho","","Used to create the ortho projection matrix",1,null],[12,"projection_mat_ortho","","Constructed from the parameters in `ortho` to transform points in 2D view space to 4D homogenous clip coordinates.",1,null],[5,"transform_mat_world_to_view","","Builds a 4x4 transformation matrix that will transform points in world space coordinates to view space coordinates based on the current 2D view position and orientation.",null,{"inputs":[{"name":"point2"},{"name":"basis2"}],"output":{"generics":["f32"],"name":"matrix4"}}],[5,"ndc_2d_to_screen_2d","","Maps OpenGL NDC coordinates to screen coordinates based on a given screen resolution.",null,{"inputs":[{"generics":["u16"],"name":"vector2"},{"generics":["f32"],"name":"point2"}],"output":{"generics":["i16"],"name":"point2"}}],[5,"screen_2d_to_ndc_2d","","Convert screen coordinate to OpenGL NDC based on a given screen resolution.",null,{"inputs":[{"generics":["u16"],"name":"vector2"},{"generics":["i16"],"name":"point2"}],"output":{"generics":["f32"],"name":"point2"}}],[11,"new","","Create a new camera centered at the origin looking down the positive Y axis with 'up' vector aligned with the Z axis.",1,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"set_viewport_dimensions","","Should be called when the screen resolution changes to update the orthographic projection state.",1,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":null}],[11,"set_zoom","","Set the zoom level.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"rotate","","",1,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"rad"}],"output":null}],[11,"move_local","","Move by delta X and Y values in local coordinates",1,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"scale_zoom","","Multiply the current zoom by the given scale factor.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"view_ortho_mats","","Returns the raw world to view transform and ortho projection matrix data, suitable for use as shader uniforms.",1,null],[0,"camera3d","gl_utils","Types and functions for 3D rendering.",null,null],[3,"Camera3d","gl_utils::camera3d","Represents a camera (\"view\") positioned and oriented in a 3D scene with a 3D transformation and a 3D projection.",null,null],[12,"position","","Position in 3D world space",2,null],[12,"yaw","","Yaw represents a clockwise rotation restricted to the range $[0, 2\\pi)$.",2,null],[12,"pitch","","Pitch represents a rotation up or down restricted to the range $[-\\pi/2, \\pi/2]$.",2,null],[12,"orientation","","Basis derived from `yaw` and `pitch`.",2,null],[12,"transform_mat_world_to_view","","Transforms points from world space to camera (view, eye) space as specified by the camera position and orientation.",2,null],[12,"projection3d","","",2,null],[3,"Projection3d","","The 3D projection which can be either perspective or orthographic",null,null],[12,"viewport_width","","",3,null],[12,"viewport_height","","",3,null],[12,"inner","","",3,null],[4,"Projection3dInner","","Either a `Perspective` or `Orthographic` projection",null,null],[13,"Perspective","","",4,null],[12,"perspective_fov","gl_utils::camera3d::Projection3dInner","Used to create the perspective projection matrix",4,null],[12,"mat","","Constructed from the parameters in `perspective_fov` to transform points in view space to 4D homogenous clip coordinates based on a perspective projection",4,null],[13,"Orthographic","gl_utils::camera3d","",4,null],[12,"zoom","gl_utils::camera3d::Projection3dInner","Constant factor to zoom in and out orthographically.",4,null],[12,"ortho","","Used to create the orthographic projection matrix",4,null],[12,"mat","","Constructed from the parameters in `ortho` to transform points in view space to 4D homogenous clip coordinates based on an orthographic projection",4,null],[5,"aspect_ratio","gl_utils::camera3d","Computes floating point 'width/height' ratio from unsigned resolution input",null,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"f32"}}],[5,"transform_mat_world_to_view","","Builds a 4x4 transformation matrix that will transform points in world space coordinates to view space coordinates for a given view position and orientation.",null,{"inputs":[{"name":"point3"},{"name":"basis3"}],"output":{"generics":["f32"],"name":"matrix4"}}],[11,"new","","Create a new camera centered at the origin looking down the positive Y axis with 'up' vector aligned with the Z axis.",2,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"with_pose","","Create a new 3D camera with the given viewport, position, and orientation.",2,{"inputs":[{"name":"u16"},{"name":"u16"},{"generics":["f32"],"name":"pose3d"}],"output":{"name":"self"}}],[11,"set_viewport_dimensions","","Should be called when the screen resolution changes.",2,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":null}],[11,"set_position","","",2,{"inputs":[{"name":"self"},{"name":"point3"}],"output":null}],[11,"rotate","","",2,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"rad"},{"generics":["f32"],"name":"rad"}],"output":null}],[11,"move_local_xy","","Moves the view position relative to the X/Y plane with X and Y direction determined by heading and Z always aligned with the Z axis, i.e. the translated position is only determined by the current yaw not the pitch.",2,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"view_mats","","Returns the raw world to view transform and view to clip projection matrix data, suitable for use as shader uniforms.",2,null],[11,"perspective","","Create a new 3D perspective projection",3,{"inputs":[{"name":"u16"},{"name":"u16"},{"generics":["f32"],"name":"rad"}],"output":{"name":"self"}}],[11,"orthographic","","Create a new 3D orthographic projection",3,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"f32"}],"output":{"name":"self"}}],[11,"as_matrix","","Returns a reference to the underlying projection matrix",3,{"inputs":[{"name":"self"}],"output":{"name":"matrix4"}}],[11,"is_orthographic","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_perspective","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_orthographic","","Converts the inner projection type to an `Orthographic` projection with the given zoom; if already an orthographic projection this will modify the zoom",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"to_perspective","","Converts the inner projection type to a `Perspective` projection with the given vertical FOV; if already a perspective projection this will modify the FOV",3,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"rad"}],"output":null}],[11,"set_viewport_dimensions","","Sets the current viewport dimensions",3,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u16"}],"output":null}],[11,"scale_fovy_or_zoom","","Multiply the current perspective vertical FOV or orthographic zoom by the given scale factor.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[0,"mesh","gl_utils","Mesh generation utilities.",null,null],[5,"grid_3d_instanced_lines_list","gl_utils::mesh","Produces vertices and indices for a 3D lines list arranged in a square grid in the X/Y plane of `dims` by `dims` dimensions.",null,null],[5,"grid_3d_instanced_lines_list_counts","","Returns the `(num_vertices, num_indices)` for a mesh generated with `grid_3d_instanced_lines_list`",null,null],[5,"hemisphere_3d_instanced_lines_list","","Generates a hemisphere with unit radius in the positive Z half-space with a number of parallels equal to `latitude_divisions` and a number of half-meridians equal to `longitude_divisions`",null,null],[5,"hemisphere_3d_instanced_lines_list_counts","","",null,null],[5,"sphere_3d_instanced_lines_list","","Produces vertices and indices for a 3D lines list unit sphere (radius $1.0$) with the given number of latitudinal divisions rounded down to the nearest even number (ensuring the sphere always has an 'equator'), and with the given number of longitudinal divisions.",null,null],[5,"sphere_3d_instanced_lines_list_counts","","Returns the `(num_vertices, num_indices)` for a mesh generated with `sphere_3d_instanced_lines_list`",null,null],[5,"capsule_3d_instanced_lines_list","","Two hemispherical \"caps\" connected at their equators.",null,null],[5,"capsule_3d_instanced_lines_list_counts","","",null,null],[5,"cylinder_3d_instanced_lines_list","","Unit cylinder-- total height is 2.0 centered at 0.0 in the vertical (Z) axis, radius 1.0 in the X/Y plane.",null,null],[5,"cylinder_3d_instanced_lines_list_counts","","",null,null],[0,"render","gl_utils","Support types for Glium rendering.",null,null],[3,"Render","gl_utils::render","State for Glium-based rendering.",null,null],[12,"glium_display","","The `glium` context represented by a `glium::backend::Context` and a `glutin::GlWindow`",5,null],[12,"resource","","A function for rendering a single frame",5,null],[12,"frame_fun","","",5,null],[12,"clear_color","","",5,null],[12,"viewports","","",5,null],[5,"frame_fun_default","","Default frame function clears all and calls resource `draw_3d` method followed by `draw_2d` method.",null,{"inputs":[{"name":"render"}],"output":null}],[5,"frame_fun_default_2d","","Default 2D frame function clears all and calls resource `draw_2d` method.",null,{"inputs":[{"name":"render"}],"output":null}],[5,"frame_fun_default_3d","","Default 3D frame function clears all and calls resource `draw_3d` method.",null,{"inputs":[{"name":"render"}],"output":null}],[0,"params","","Some useful drawing parameters.",null,null],[17,"BLEND_FUNC_NORMAL","gl_utils::render::params","The usual blending function to ensure that magnified texels are blended properly with transparency.",null,null],[17,"BLEND_FUNC_INVERT_COLOR","","Writing white source pixels will invert the destination pixel. Color channels in the texture should all be equal to the alpha channel (grayscale) so that 100% opaque regions are white and 100% transparent regions are black.",null,null],[0,"resource","gl_utils::render","A trait for resource types with arbitrary `draw` functionality and a default implementation that supports switching to a \"quad viewport\" mode.",null,null],[3,"DefaultResource","gl_utils::render::resource","A default implementation of `Resource` containing the builtin shader programs and some pre-defined vertex sources.",null,null],[12,"shader_programs","","",6,null],[12,"textures_16x16","","Texture array of 16x16 pixel general purpose textures",6,null],[12,"sprite_16x16_vertices","","Position and texture index of 2d sprites sprites indexing the 16x16 texture array",6,null],[12,"tileset_textures_128x128","","Texture array of 128x128 pixel tileset textures with 8x8 tile dimensions",6,null],[12,"tile_vertices","","Tile vertices with sub-ranges mapped to viewports by `viewport_tile_data[i].vertex_range`.",6,null],[12,"viewport_tile_data","","Data used by each viewport when drawing tiles",6,null],[12,"viewport_line_loop_vertices","","Vertices for each viewport to be rendered as line loops",6,null],[12,"instanced_3d_vertices","","3D vertices for instanced drawing.",6,null],[12,"instanced_3d_indices_lines","","Indices for drawing instanced 3D meshes in `instanced_3d_vertices`.",6,null],[12,"per_instance_3d_vertices","","",6,null],[12,"grid_instanced_3d_index_lines_range","","Slice of `instanced_3d_indices_lines` that contains the indices for rendering the debug grid mesh as a lines list",6,null],[12,"grid_per_instance_3d_vertex_range","","Per-instance vertices used to draw instanced XY grid mesh",6,null],[12,"hemisphere_instanced_3d_index_lines_range","","Slice of `instanced_3d_indices_lines` that contains the indices for rendering the hemisphere mesh as a lines list",6,null],[12,"hemisphere_per_instance_3d_vertex_range","","Per-instance vertices used to draw instanced hemisphere mesh",6,null],[12,"sphere_instanced_3d_index_lines_range","","Slice of `instanced_3d_indices_lines` that contains the indices for rendering the sphere mesh as a lines list",6,null],[12,"sphere_per_instance_3d_vertex_range","","Per-instance vertices used to draw instanced sphere mesh",6,null],[12,"capsule_instanced_3d_index_lines_range","","Slice of `instanced_3d_indices_lines` that contains the indices for rendering the capsule mesh as a lines list",6,null],[12,"capsule_per_instance_3d_vertex_range","","Per-instance vertices used to draw instanced capsule mesh",6,null],[12,"cylinder_instanced_3d_index_lines_range","","Slice of `instanced_3d_indices_lines` that contains the indices for rendering the cylinder mesh as a lines list",6,null],[12,"cylinder_per_instance_3d_vertex_range","","Per-instance vertices used to draw instanced cylinder mesh",6,null],[12,"aabb_per_instance_3d_vertex_range","","",6,null],[3,"ViewportTileData","","Per-viewport data for tile rendering",null,null],[12,"vertex_range","","Each range defines the tiles in the `tiles_vertex_buffer` belonging to the corresponding viewport.",7,null],[12,"margin_px_left","","A positive margin will shift the tile grid relative to the left of the viewport by this many pixels.",7,null],[12,"margin_px_top","","A positive margin will shift the tile grid downward from the top of the viewport by this many pixels.",7,null],[17,"MAIN_VIEWPORT","","",null,null],[17,"UPPER_LEFT_VIEWPORT","","",null,null],[17,"UPPER_RIGHT_VIEWPORT","","",null,null],[17,"LOWER_LEFT_VIEWPORT","","",null,null],[17,"LOWER_RIGHT_VIEWPORT","","",null,null],[17,"TEXTURE_16X16_INDEX_CROSSHAIR","","For use with `BLEND_FUNC_NORMAL`",null,null],[17,"TEXTURE_16X16_INDEX_CROSSHAIR_INVERSE","","For use with `BLEND_FUNC_INVERT_COLOR`",null,null],[17,"TILESET_128X128_INDEX_EASCII_ACORN","","For use with `BLEND_FUNC_NORMAL`",null,null],[17,"TILESET_128X128_INDEX_EASCII_ACORN_INVERSE","","For use with `BLEND_FUNC_INVERT_COLOR`",null,null],[17,"CROSSHAIR_SPRITE_16X16_VERTEX_INDEX","","Index into `sprites_16x16_vertices` for the crosshair.",null,null],[17,"MESH_3D_GRID_DIMS","","",null,null],[8,"Resource","","Represents a generic Glium resource type for a renderer to use as a source of drawing (vertex rendering).",null,null],[10,"new","","",8,{"inputs":[{"name":"display"}],"output":{"name":"self"}}],[11,"init","","",8,{"inputs":[{"name":"render"}],"output":null}],[11,"draw_2d","","",8,{"inputs":[{"name":"render"},{"name":"frame"}],"output":null}],[11,"draw_3d","","",8,{"inputs":[{"name":"render"},{"name":"frame"}],"output":null}],[11,"new","","",6,{"inputs":[{"name":"display"}],"output":{"name":"self"}}],[11,"init","","",6,{"inputs":[{"name":"render"}],"output":null}],[11,"draw_2d","","",6,{"inputs":[{"name":"render"},{"name":"frame"}],"output":null}],[11,"draw_3d","","",6,{"inputs":[{"name":"render"},{"name":"frame"}],"output":null}],[11,"camera3d_position_set","gl_utils::render","",5,{"inputs":[{"name":"self"},{"name":"point3"}],"output":null}],[11,"camera3d_move_local_xy","","",5,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"camera3d_rotate","","",5,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"rad"},{"generics":["f32"],"name":"rad"}],"output":null}],[11,"camera3d_orthographic_zoom_scale","","Scales 3D zoom of viewports 1-3.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"camera3d_perspective_fovy_scale","","Scales 3D zoom of viewport 0 (the main viewport) only.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"camera2d_zoom_set","","",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"camera2d_zoom_shift","","Modifies the 2D zoom by the given amount for all viewports.",5,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"window_resized","","",5,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"demo_init","","Initializes \"demo\" state such as example mesh instances and viewport text tiles.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"demo_handle_glutin_event","","",5,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"event"}],"output":null}],[11,"demo_toggle_quad_viewports","","Switch between single (perspective) and quad viewport modes (perspective + three ortho viewports).",5,{"inputs":[{"name":"self"}],"output":null}],[11,"default","gl_utils::render::resource","",7,{"inputs":[],"output":{"name":"self"}}],[0,"viewport","gl_utils::render","A rectangular viewport and associated 2D and 3D cameras.",null,null],[3,"Viewport","gl_utils::render::viewport","A viewport defined by a `glium::Rect` structure, with associated 2D and 3D cameras",null,null],[12,"rect","","Describes the viewport position and size.",9,null],[12,"camera2d","","",9,null],[12,"camera3d","","",9,null],[3,"Builder","","",null,null],[11,"new","","Create a new viewport with the given `Rect`",9,{"inputs":[{"name":"rect"}],"output":{"name":"self"}}],[11,"with_pose_3d","","Also initializes `self.camera3d` with position and orientation",9,{"inputs":[{"name":"rect"},{"generics":["f32"],"name":"pose3d"}],"output":{"name":"self"}}],[11,"set_rect","","Should be called when screen resolution changes.",9,{"inputs":[{"name":"self"},{"name":"rect"}],"output":null}],[11,"new","","",10,{"inputs":[{"name":"rect"}],"output":{"name":"self"}}],[11,"with_zoom_2d","","",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"orthographic_3d","","Changes the 3D camera projection from perspective (default) to orthographic",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"with_pose_3d","","",10,{"inputs":[{"name":"self"},{"generics":["f32"],"name":"pose3d"}],"output":{"name":"self"}}],[11,"build","","",10,{"inputs":[{"name":"self"}],"output":{"name":"viewport"}}],[11,"new","gl_utils::render","Creates a new renderer with default viewport and resources.",5,{"inputs":[{"name":"display"}],"output":{"name":"self"}}],[11,"reset","","Restore the renderer to the newly created state",5,{"inputs":[{"name":"self"}],"output":null}],[11,"do_frame","","Convenience method to call the current frame function on self",5,{"inputs":[{"name":"self"}],"output":null}],[11,"screenshot","","Read the content of the front buffer and save in a PNG file with unique file name `screenshot-N.png` in the current directory.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"report_sizes","","",5,{"inputs":[],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[0,"shader","gl_utils","Shader and shader program utilities.",null,null],[3,"IdVariants","gl_utils::shader","",null,null],[3,"ProgramIdVariants","","",null,null],[4,"ShaderId","","",null,null],[13,"VertPassthru2d","","",11,null],[13,"VertPassthru2dColor","","",11,null],[13,"VertPassthru2dSprite","","",11,null],[13,"VertPassthru2dTile","","",11,null],[13,"VertWorldSpace2d","","",11,null],[13,"VertWorldSpace3d","","",11,null],[13,"VertPassthru3dScaleColor","","",11,null],[13,"VertModelSpace3dInstancedScaleColor","","",11,null],[13,"VertModelSpace3dInstancedOrientationScaleColor","","",11,null],[13,"VertModelSpace3dInstancedCapsule","","",11,null],[13,"GeomWorldSpace2dSprite","","",11,null],[13,"GeomWorldSpace2dTile","","",11,null],[13,"GeomWorldSpace3dAabb","","",11,null],[13,"FragColor","","",11,null],[13,"FragUniColor","","",11,null],[13,"FragTexture2d","","",11,null],[13,"FragTexture2dSprite","","",11,null],[13,"FragTexture2dTile","","",11,null],[4,"ProgramId","","",null,null],[13,"ClipSpace2dColor","","",12,null],[13,"ClipSpace2dUniColor","","",12,null],[13,"WorldSpace2dUniColor","","",12,null],[13,"WorldSpace2dSprite","","",12,null],[13,"WorldSpace2dTile","","",12,null],[13,"WorldSpace3dUniColor","","",12,null],[13,"WorldSpace3dAabb","","",12,null],[13,"ModelSpace3dInstancedScaleColor","","",12,null],[13,"ModelSpace3dInstancedOrientationScaleColor","","",12,null],[13,"ModelSpace3dInstancedCapsule","","",12,null],[5,"load_shaders","","",null,{"inputs":[],"output":{"generics":["vecmap","error"],"name":"result"}}],[5,"build_programs","","",null,{"inputs":[{"name":"facade"}],"output":{"generics":["vecmap","error"],"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"shaderid"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"shaderid"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"shaderid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"shaderid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"iter_variants","","",11,{"inputs":[],"output":{"name":"idvariants"}}],[11,"next_variant","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["shaderid"],"name":"option"}}],[11,"prev_variant","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["shaderid"],"name":"option"}}],[11,"min_value","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",11,{"inputs":[],"output":{"name":"self"}}],[11,"from_i64","","",11,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",11,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_i64","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"count_variants","","",11,{"inputs":[],"output":{"name":"usize"}}],[11,"iter_variants","","",11,{"inputs":[],"output":{"generics":["iterator"],"name":"box"}}],[11,"source_str","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"sourcepath","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"programid"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"programid"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"programid"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"programid"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"iter_variants","","",12,{"inputs":[],"output":{"name":"programidvariants"}}],[11,"next_variant","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["programid"],"name":"option"}}],[11,"prev_variant","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["programid"],"name":"option"}}],[11,"min_value","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"from_i64","","",12,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_i64","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"count_variants","","",12,{"inputs":[],"output":{"name":"usize"}}],[11,"iter_variants","","",12,{"inputs":[],"output":{"generics":["iterator"],"name":"box"}}],[0,"texture","gl_utils","Texture related utilities.",null,null],[4,"LoadError","gl_utils::texture","",null,null],[13,"IoError","","",15,null],[13,"ImageError","","",15,null],[13,"TextureCreationError","","",15,null],[5,"texture2d_with_mipmaps_from_bytes","","Load a 2D texture from the given bytes with the given format and mipmaps.",null,null],[5,"texture2d_with_mipmaps_from_file","","Load a 2D texture from the given path with the given format and mipmaps.",null,{"inputs":[{"name":"facade"},{"name":"str"},{"name":"imageformat"},{"name":"mipmapsoption"}],"output":{"generics":["texture2d","loaderror"],"name":"result"}}],[5,"texture2darray_with_mipmaps_from_bytes","","Load a 2D texture array from the given vector of byte slices for each individual texture, with the given format and mipmaps.",null,{"inputs":[{"name":"facade"},{"name":"vec"},{"name":"imageformat"},{"name":"mipmapsoption"}],"output":{"generics":["texture2darray","loaderror"],"name":"result"}}],[5,"texture2darray_with_mipmaps_from_files","","Load a 2D texture array from the given paths with the given format and mipmaps.",null,{"inputs":[{"name":"facade"},{"name":"vec"},{"name":"imageformat"},{"name":"mipmapsoption"}],"output":{"generics":["texture2darray","loaderror"],"name":"result"}}],[17,"CROSSHAIR_PNG_FILE_BYTES","","An RGBA 16x16 square of pixels with white color values with an opaque cross of two pixels thickness",null,null],[17,"CROSSHAIR_INVERSE_PNG_FILE_BYTES","","For use with `BLEND_FUNC_INVERT_COLOR`-- transparent pixels have black color values instead of white but the opaque portion is still white",null,null],[17,"TILESET_EASCII_ACORN_8X8_PNG_FILE_BYTES","","",null,null],[17,"TILESET_EASCII_ACORN_8X8_INVERSE_PNG_FILE_BYTES","","",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",15,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"imageerror"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"texturecreationerror"}],"output":{"name":"self"}}],[0,"vertex","gl_utils","Vertex related utilities including vertex specifications.",null,null],[3,"Vert2d","gl_utils::vertex","",null,null],[12,"position","","",16,null],[3,"Vert2dColor","","",null,null],[12,"position","","",17,null],[12,"color","","",17,null],[3,"Vert2dLayer","","",null,null],[12,"position","","",18,null],[12,"layer","","",18,null],[3,"Vert2dTile","","",null,null],[12,"row","","",19,null],[12,"column","","",19,null],[12,"tile","","",19,null],[3,"Vert3dScaleColor","","",null,null],[12,"position","","",20,null],[12,"scale","","",20,null],[12,"color","","",20,null],[3,"Vert3dOrientationScaleColor","","",null,null],[12,"position","","",21,null],[12,"orientation","","",21,null],[12,"scale","","",21,null],[12,"color","","",21,null],[3,"Vert3dInstanced","","",null,null],[12,"inst_position","","",22,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vert2d"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"vert2d"}}],[11,"build_bindings","","",16,{"inputs":[],"output":{"name":"vertexformat"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vert2dcolor"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"vert2dcolor"}}],[11,"build_bindings","","",17,{"inputs":[],"output":{"name":"vertexformat"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vert2dlayer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"vert2dlayer"}}],[11,"build_bindings","","",18,{"inputs":[],"output":{"name":"vertexformat"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vert2dtile"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"vert2dtile"}}],[11,"build_bindings","","",19,{"inputs":[],"output":{"name":"vertexformat"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vert3dscalecolor"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"vert3dscalecolor"}}],[11,"build_bindings","","",20,{"inputs":[],"output":{"name":"vertexformat"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vert3dorientationscalecolor"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"vert3dorientationscalecolor"}}],[11,"build_bindings","","",21,{"inputs":[],"output":{"name":"vertexformat"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vert3dinstanced"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"vert3dinstanced"}}],[11,"build_bindings","","",22,{"inputs":[],"output":{"name":"vertexformat"}}],[14,"def_programs","gl_utils","Define a list of shaders with source paths and a list of shader programs using those shaders.",null,null],[14,"def_programs_include","","Like `def_programs!` except that the shader source will be compiled-in with `include_str!`. The original source path is still available through the `source_path` method on shader IDs, but it is not required to be present when loading shaders.",null,null]],"paths":[[3,"Pose3d"],[3,"Camera2d"],[3,"Camera3d"],[3,"Projection3d"],[4,"Projection3dInner"],[3,"Render"],[3,"DefaultResource"],[3,"ViewportTileData"],[8,"Resource"],[3,"Viewport"],[3,"Builder"],[4,"ShaderId"],[4,"ProgramId"],[3,"IdVariants"],[3,"ProgramIdVariants"],[4,"LoadError"],[3,"Vert2d"],[3,"Vert2dColor"],[3,"Vert2dLayer"],[3,"Vert2dTile"],[3,"Vert3dScaleColor"],[3,"Vert3dOrientationScaleColor"],[3,"Vert3dInstanced"]]};
initSearch(searchIndex);
